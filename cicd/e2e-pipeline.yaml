pool:
  name: builders

parameters:

- name: workspace_env
  type: string
  values:
    - dev
    - sbox
    - prod
    - dr
    - perf   

- name: terraform_action
  type: string
  values:
    - plan
    - apply
    - destroy 

variables:

- template: job-variables.yml

- name: tf-location
  value: 'terraform'

- name: tfvars_location
  value: "tfvars/${{ parameters.workspace_env }}.tfvars" 

- name: imageRepository

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_stage') }}:

    value: $(imageRepositoryStage)

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_release') }}:

    value: $(imageRepositoryRelease)

- name: imageName

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_stage') }}:

    value: $(imageNameStage)

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_release') }}:

    value: $(imageNameRelease)

- name: containerName

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_stage') }}:

    value: $(containerNameStage)

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_release') }}:

    value: $(containerNameRelease)

- name: build_arg_arguments

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_stage') }}:

    value: $(docker_build_arguments_stage)

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_release') }}:

    value: $(docker_build_arguments_release)

- name: deploymentName

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_stage') }}:

    value: $(deploymentNameStage)

  ${{ if eq(variables['Build.SourceBranchName'], 'docker_release') }}:

    value: $(deploymentNameRelease)

stages:
- stage: 'Terraform_Plan'
  displayName: Terraform_Plan_Minikube_Terraform
  condition: eq('${{ parameters.terraform_action }}', 'plan')
  jobs:
  # - ${{ if eq(parameters.terrafrom_cloud_workspace, '$(Build.BuildNumber)') }}: 
  #   - template: /pipelines/templates/jobs/tf-backend-workspace.yml
  #     parameters:
  #       terraform_workspace: $(Build.BuildNumber)
  #       action: create
  - job: terraform_plan
    displayName: 'Terraform_Plan'
    #You need set in Azure DevOps group libariy called terraform_configuration
    variables:
    - group: "terraform_configuration"
    # - group: "terraform_configuration_${{ parameters.aws_account_env }}"
    steps:
    - checkout: self
      fetchDepth: 1
    - task: Bash@3
      displayName: 'Terraform_Plan'
      inputs:
        targetType: 'inline'
        workingDirectory: $(tf-location)
        script: |
          if [ "${{ parameters.terrafrom_cloud_workspace }}" == '$(Build.BuildNumber)' ]; then
            sed "s/"\$TF_WORKSPACE"/$(Build.BuildNumber)/g" -i backend.tf
          else
            sed "s/"\$TF_WORKSPACE"/${{ parameters.terrafrom_cloud_workspace }}/g" -i backend.tf
          fi
          sed "s/"\$TFC_TOKEN"/$TFC_TOKEN/g" -i backend.tf 
          
          cat backend.tf
          terraform init -upgrade -input=false
          terraform validate
          terraform plan -input=false -var-file=$(tfvars_location)
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_KEY)
        TFC_TOKEN: $(TFC_TOKEN)
        TF_LOG: $(TF_LOG)
        # TF_VAR_current_count: ${{ parameters.current_count }}
        # TF_VAR_instance_count: ${{ parameters.new_count }}
        # TF_VAR_instance_type: ${{ parameters.instance_type }}
        
- stage: 'Terraform_Apply'
  displayName: Terraform_Apply_Minikube_Terraform
  condition: eq('${{ parameters.terraform_action }}', 'plan')
  jobs:
  # - ${{ if eq(parameters.terrafrom_cloud_workspace, '$(Build.BuildNumber)') }}: 
  #   - template: /pipelines/templates/jobs/tf-backend-workspace.yml
  #     parameters:
  #       terraform_workspace: $(Build.BuildNumber)
  #       action: create
  - job: terraform_apply
    displayName: 'Terraform_Apply'
    #You need set in Azure DevOps group libariy called terraform_configuration
    variables:
    - group: "terraform_configuration"
    # - group: "terraform_configuration_${{ parameters.aws_account_env }}"
    steps:
    - checkout: self
      fetchDepth: 1
    - task: Bash@3
      displayName: 'Terraform_Apply'
      inputs:
        targetType: 'inline'
        workingDirectory: $(tf-location)
        script: |
          pwd
          ls
          sed "s/\$TFC_TOKEN/$TFC_TOKEN/g" -i backend.tf
          sed "s/"\$TF_WORKSPACE"/${{ parameters.terrafrom_cloud_workspace }}/g" -i backend.tf
          terraform init -upgrade -input=false
          terraform validate
          terraform apply -auto-approve -input=false -var-file=$(tfvars_location)
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_KEY)
        TFC_TOKEN: $(TFC_TOKEN)
        TF_LOG: $(TF_LOG)
        # TF_VAR_current_count: ${{ parameters.current_count }}
        # TF_VAR_instance_count: ${{ parameters.new_count }}
        # TF_VAR_instance_type: ${{ parameters.instance_type }}

- stage: Docker_Login
  jobs:
  - job: login  
    displayName: Login to Docker Hub 
    dependsOn: [Terraform_Apply_Minikube_Terraform] 
    steps:
      - task: Docker@2
        displayName: Login to Docker Hub
        inputs:
          command: login
          containerRegistry: containerRegistry

- stage: Docker_Build_Backend
  jobs:
  - job: build  
    displayName: build backend image  
    steps:
      - task: Docker@2
        displayName: Build and push an image to azrue container registry
        inputs:
          containerRegistry: $(containerRegistry)
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          command: buildAndPush  
          arguments: $(build_arg_arguments)
          tags: |
            $(Build.SourceVersion)
            latest

- stage: Docker_Build_Frontend
  jobs:
  - job: build  
    displayName: build frontend image   
    steps:
      - task: Docker@2
        displayName: Build and push an image to azrue container registry
        inputs:
          containerRegistry: $(containerRegistry)
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          command: buildAndPush  
          arguments: $(build_arg_arguments)
          tags: |
            $(Build.SourceVersion)
            latest
            